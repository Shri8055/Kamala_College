Heres the working of this software till now : register.php has the the 85+ inputs that takes the student basic details 
there is a class dropdown that comes from master classes names comes from class master , in class master while creating the class
we take name, total intake capacity, total divisions, pattern : sem / yearly, fee pattern : sem / yearly, Duration in years 
According to this we get idea that class has sem pattern / yearly pattern, we have created the class be for the odd sem we should 
give titles because this titles are then called in fee structure , also while showing the class Eg : BCA (class has created, 
but each academic year is not created to show like BCA PART 1, BCA PART 2, BCA PART 3 like this we do all in class master)
Now we have created the class so we should declare the subjects too, so we have dropdown of classes here we call the pattern 
and based on this we decide its sem / year and subejcts entry, subejcts and classes master ends here,
Now we should also declare fees to that created classes so we call the class name and class title (odd sems names like BCA PART 1)
we can set fees to this classes, fee master also ended here, now again in register.php based on what student has selected we show 
subejcts and when student is registered then we store this selected subjects in 




save_subjects.php
<?php
// save_subjects.php
// Saves/updates subjects for a class/semester and updates subject_summary.
// Compatible with your addsub.php form (arrays: sub_id[], sub_code[], sub_sh_nm[], sub_fl_nm[], sub_typ[],
 // credit[], int_min_mrk[], int_max_mrk[], ext_min_mrk[], ext_max_mrk[], total[], type[], sel_comp_sub, sel_op_sub, current_sem, acad_yr)

include '../includes/db.php';

function esc($conn, $v) {
    return $conn->real_escape_string($v);
}

// --- basic inputs & validation ---
if (!isset($_POST['d_cls']) || empty($_POST['d_cls'])) {
    die("Error: Class is not selected.");
}
$class_id = (int) $_POST['d_cls'];

// Determine semester: prefer edit_sem (GET) else hidden current_sem (POST)
$edit_sem = isset($_GET['edit_sem']) ? (int) $_GET['edit_sem'] : 0;
$current_sem = $edit_sem ?: (int)($_POST['current_sem'] ?? 1);

// acad year from form
$acad_yr = $_POST['acad_yr'] ?? '';

// fetch class info (to set int_cap and class_name if needed)
$cls_name = '';
$int_cap_cls = 0;
$stmtC = $conn->prepare("SELECT tot_cap_cls, cls_ful_nm FROM classes WHERE cls_id = ?");
$stmtC->bind_param("i", $class_id);
$stmtC->execute();
$stmtC->bind_result($int_cap_cls, $cls_name);
$stmtC->fetch();
$stmtC->close();
$int_cap = (int)$int_cap_cls;

// --- gather posted arrays (these come from addsub.php) ---
$sub_codes   = $_POST['sub_code']       ?? [];
$sub_sh_nms  = $_POST['sub_sh_nm']      ?? [];
$sub_fl_nms  = $_POST['sub_fl_nm']      ?? [];
$sub_typs    = $_POST['sub_typ']        ?? [];
$credits     = $_POST['credit']         ?? [];
$int_mins    = $_POST['int_min_mrk']    ?? [];
$int_maxs    = $_POST['int_max_mrk']    ?? [];
$ext_mins    = $_POST['ext_min_mrk']    ?? [];
$ext_maxs    = $_POST['ext_max_mrk']    ?? [];
$totals      = $_POST['tot_sub']          ?? [];
$types       = $_POST['type']           ?? []; // 'compulsory' or 'optional'
$sub_ids_post= $_POST['sub_id']         ?? []; // may be not present for some rows

$sel_comp_sub = (int)($_POST['sel_comp_sub'] ?? 0);
$sel_op_sub   = (int)($_POST['sel_op_sub'] ?? 0);

// count rows by sub_code array (we'll iterate by this)
$totalRows = count($sub_codes);
if ($totalRows === 0) {
    die("Error: No subjects submitted.");
}

// --- fetch existing subjects for this class+sem to allow matching by sub_code if sub_id missing ---
$existing_map = []; // map uppercase(sub_code) => sub_id
$existing_ids = []; // list of existing sub_ids
$stmtE = $conn->prepare("SELECT sub_id, sub_code FROM subjects WHERE class_id = ? AND sem = ?");
$stmtE->bind_param("ii", $class_id, $current_sem);
$stmtE->execute();
$resE = $stmtE->get_result();
while ($r = $resE->fetch_assoc()) {
    $existing_ids[] = (int)$r['sub_id'];
    $k = strtoupper(trim($r['sub_code'] ?? ''));
    if ($k !== '') $existing_map[$k] = (int)$r['sub_id'];
}
$stmtE->close();

// We'll collect processed IDs (existing updated + newly inserted)
$processedIds = [];

// Counters for summary
$comp_count = 0;
$opt_count  = 0;

// Process each submitted row (index-based)
for ($i = 0; $i < $totalRows; $i++) {
    // normalize input values
    $code    = trim($sub_codes[$i] ?? '');
    $sh      = trim($sub_sh_nms[$i] ?? '');
    $fl      = trim($sub_fl_nms[$i] ?? '');
    $typ     = trim($sub_typs[$i] ?? '');
    $credit  = (int)($credits[$i] ?? 0);
    $intMin  = (int)($int_mins[$i] ?? 0);
    $intMax  = (int)($int_maxs[$i] ?? 0);
    $extMin  = (int)($ext_mins[$i] ?? 0);
    $extMax  = (int)($ext_maxs[$i] ?? 0);
    if ($intMax > 0 || $extMax > 0) {
        $total = $intMax + $extMax;
    } else {
        $total = !empty($totals[$i]) ? (int)$totals[$i] : 0;
    }
    $rowType = trim($types[$i] ?? 'compulsory'); // fallback

    // skip completely empty rows (no code and no full name)
    if ($code === '' && $fl === '') continue;

    // count for summary only for non-empty rows
    if ($rowType === 'compulsory') $comp_count++; else $opt_count++;

    // determine sub_id: prefer the posted sub_id (if any), else try to match by sub_code in DB
    $posted_sid = null;
    if (isset($sub_ids_post[$i]) && $sub_ids_post[$i] !== '') {
        $posted_sid = (int) $sub_ids_post[$i];
    }
    $use_sub_id = null;
    if (!empty($posted_sid)) {
        $use_sub_id = $posted_sid;
    } else {
        $lookup = strtoupper($code);
        if ($lookup !== '' && isset($existing_map[$lookup])) {
            $use_sub_id = (int)$existing_map[$lookup];
        }
    }

    // escape strings for safe SQL building (we use real_escape_string)
    $code_e = esc($conn, $code);
    $sh_e   = esc($conn, $sh);
    $fl_e   = esc($conn, $fl);
    $typ_e  = esc($conn, $typ);
    $type_e = esc($conn, $rowType);
    $acad_e = esc($conn, $acad_yr);
    $clsname_e = esc($conn, $cls_name);

    if (!empty($use_sub_id)) {
        // UPDATE existing subject
        $sid = (int)$use_sub_id;
        $sql = "UPDATE subjects SET
                    sub_code = '{$code_e}',
                    sub_sh_nm = '{$sh_e}',
                    sub_fl_nm = '{$fl_e}',
                    sub_typ = '{$typ_e}',
                    credit = {$credit},
                    int_min_mrk = {$intMin},
                    int_max_mrk = {$intMax},
                    ext_min_mrk = {$extMin},
                    ext_max_mrk = {$extMax},
                    total = {$total},
                    type = '{$type_e}',
                    acad_yr = '{$acad_e}'
                WHERE sub_id = {$sid} LIMIT 1";
        $conn->query($sql);
        $processedIds[] = $sid;
    } else {
        // INSERT new subject (set class_id & sem & acad_yr & int_cap & class_name)
        $sql = "INSERT INTO subjects
            (class_id, sem, acad_yr, int_cap, class_name, sub_code, sub_sh_nm, sub_fl_nm, sub_typ, credit, int_min_mrk, int_max_mrk, ext_min_mrk, ext_max_mrk, total, type)
            VALUES
            ({$class_id}, {$current_sem}, '{$acad_e}', {$int_cap}, '{$clsname_e}', '{$code_e}', '{$sh_e}', '{$fl_e}', '{$typ_e}', {$credit}, {$intMin}, {$intMax}, {$extMin}, {$extMax}, {$total}, '{$type_e}')";

        $conn->query($sql);
        $newId = (int)$conn->insert_id;
        if ($newId) $processedIds[] = $newId;
    }
}

// --- Delete subjects that were removed in the form (present in DB but not in processedIds) ---
if ($edit_sem || $current_sem) {
    if (!empty($processedIds)) {
        $ids_list = implode(',', array_map('intval', $processedIds));
        $sql = "DELETE FROM subjects 
                WHERE class_id = {$class_id} 
                AND sem = {$current_sem} 
                AND sub_id NOT IN ({$ids_list})";
        $conn->query($sql);
    } else {
        // nothing submitted; delete all subjects for this sem
        $sql = "DELETE FROM subjects WHERE class_id = {$class_id} AND sem = {$current_sem}";
        $conn->query($sql);
    }
}

// --- Update subject_summary table (insert or update) ---
// comp_sub = number of compulsory rows, op_sub = number of optional rows, tot_sub = sum
$comp_sub = (int)$comp_count;
$op_sub   = (int)$opt_count;
$tot_sub  = $comp_sub + $op_sub;

// Upsert subject_summary by checking existence
$check = $conn->prepare("SELECT COUNT(*) FROM subject_summary WHERE class_id = ? AND sem = ?");
$check->bind_param("ii", $class_id, $current_sem);
$check->execute();
$check->bind_result($exists);
$check->fetch();
$check->close();

if ($exists > 0) {
    $upd = $conn->prepare("UPDATE subject_summary SET comp_sub=?, sel_comp_sub=?, op_sub=?, sel_op_sub=?, tot_sub=? WHERE class_id=? AND sem=?");
    $upd ->bind_param("iiiiiii", $comp_sub, $sel_comp_sub, $op_sub, $sel_op_sub, $tot_sub, $class_id, $current_sem);
    $upd ->execute();
    $upd ->close();
} else {
    $ins = $conn->prepare("INSERT INTO subject_summary (class_id, sem, comp_sub, sel_comp_sub, op_sub, sel_op_sub, tot_sub) VALUES (?, ?, ?, ?, ?, ?, ?)");
    $ins->bind_param("iiiiiii", $class_id, $current_sem, $comp_sub, $sel_comp_sub, $op_sub, $sel_op_sub, $tot_sub);
    $ins->execute();
    $ins->close();
}
// --- Also update these values in every subject row for this class+sem ---
$updSubjects = $conn->prepare("
    UPDATE subjects 
    SET comp_sub=?, sel_comp_sub=?, op_sub=?, sel_op_sub=?, tot_sub=?
    WHERE class_id=? AND sem=?");
$updSubjects->bind_param("iiiiiii", $comp_sub, $sel_comp_sub, $op_sub, $sel_op_sub, $tot_sub, $class_id, $current_sem);
$updSubjects->execute();
$updSubjects->close();

$res = $conn->query("
    SELECT 
        SUM(CASE WHEN type='compulsory' THEN 1 ELSE 0 END) as comp_sub,
        SUM(CASE WHEN type='optional' THEN 1 ELSE 0 END) as op_sub
    FROM subjects
    WHERE class_id = {$class_id} AND sem = {$current_sem}
");
$row = $res->fetch_assoc();
$comp_sub = (int)($row['comp_sub'] ?? 0);
$op_sub   = (int)($row['op_sub'] ?? 0);
$tot_sub  = $comp_sub + $op_sub;

// Redirect back to addsub with selected class  
header("Location: addsub.php?d_cls={$class_id}");
// header("Location: addsub.php?d_cls={$class_id}&edit_sem={$current_sem}");
exit;



rct.php
<?php
include_once('../includes/header.php');
include '../includes/db.php';

// Calculate academic year dynamically
$year = date("Y");
$month = date("n");
if($month >= 6) {
    $acadYear = $year . "-" . ($year+1); // e.g. June 2025 → 2025-2026
} else {
    $acadYear = ($year-1) . "-" . $year; // e.g. Jan 2025 → 2024-2025
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['saveReceipt'])) {
    $stu_id     = intval($_POST['stu_id']);
    $cls_id     = intval($_POST['cls_id']);
    $prn        = $_POST['prn_no'];
    $name       = $_POST['r_stu_name'];
    $cls        = $_POST['r_stu_str'];
    $category   = $_POST['r_stu_cat'];
    $stu_type   = $_POST['type'];

    $receipt_no = $_POST['r_no'] ?? '';
    $receipt_date = $_POST['r_date'] ?? date('Y-m-d');
    $acadYear   = $_POST['r_acad_yr'] ?? '';
    $receiptAmt = floatval($_POST['receipt_amt'] ?? 0);
    $paymentType= $_POST['payment_type'] ?? 'Cash';
    $utrNo      = $_POST['utr_no'] ?? '';

    // Fee JSON (build from JS before submit, or reconstruct here)
    $feeParticulars = $_POST['fee_data'] ?? '[]'; // send via hidden input
    $feeParticulars = json_decode($feeParticulars, true);

    // Calculate totals
    $totalFee = array_sum(array_column($feeParticulars, 'amount'));
    $pending  = $totalFee - $receiptAmt;

    // ✅ Insert into receipts
    $stmt = $conn->prepare("INSERT INTO receipts 
        (receipt_no, receipt_date, academic_year, stu_acad_year, student_prn, student_name, student_class, category, fee_type,
         fee_particulars, total_fee, receipt_amount, pending_fee, payment_type, utr_no) 
         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
    $jsonFee = json_encode($feeParticulars, JSON_UNESCAPED_UNICODE);
    $stuAcadYear = $acadYear; // or derive FY/SY/TY
    $stmt->bind_param("ssssssssssddsss", 
        $receipt_no, $receipt_date, $acadYear, $stuAcadYear, $prn, $name, $cls, $category, $stu_type,
        $jsonFee, $totalFee, $receiptAmt, $pending, $paymentType, $utrNo
    );
    $stmt->execute();

    // ✅ Update student_subjects (tot_fee, pen_fee)
    $upd = $conn->prepare("UPDATE student_subjects SET tot_fee=?, pen_fee=? WHERE stu_id=? AND cls_id=?");
    $upd->bind_param("ddii", $totalFee, $pending, $stu_id, $cls_id);
    $upd->execute();

    echo "<script>alert('✅ Receipt saved and fees updated successfully!');</script>";
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Kamala College | Fee Receipt</title>
<link rel="stylesheet" href="../assets/css/rct.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>

<h3 style="text-align: center; margin-top: 10px;">Fee Receipt</h3>

<!-- 🔍 Search Box -->
<div class="search-box" style="display: flex; align-items: center; gap: 10px;">
  <label for="stuSearch" style="padding-top: 5px;">Search Student:</label>
  <input type="text" id="stuSearch" placeholder="Search by PRN, R-ID, Phone, Name..." style="width: 500px; padding: 5px;">
</div>

<div id="searchResults" class="search-results"></div>

<form id="receiptForm" action="rct.php" method="POST">
  <input type="hidden" id="stu_id" name="stu_id">
  <input type="hidden" id="cls_id" name="cls_id">

    <table>
        <tr>
            <td style="width: 10%;"><label for="r_no">Receipt No.:</label></td>
            <td><input id="r_no" name="r_no" type="text" value="1001" style="text-align: center; background-color: #ffd3d1;" required readonly></td>
            <td><label for="r_date">Receipt Date:</label></td>
            <td><input id="r_date" name="r_date" type="date"></td>
            <td><label for="r_acad_yr">Academic Year:</label></td>
            <td><input type="text" id="r_acad_yr" name="r_acad_yr" value="<?php echo $acadYear; ?>" readonly></td>
            <td colspan="2"><button>CALCULATOR</button></td>
        </tr>
        <tr>
            <td><label for="r_stu_str">Class:</label></td>
            <td colspan="3"><input style="width: 96%;" type="text" id="r_stu_str" name="r_stu_str" readonly></td>
            <td><label for="prn_no">PRN No:</label></td>
            <td><input type="text" id="prn_no" name="prn_no" readonly></td>
            <td><label for="type">Fee type:</label></td>
            <td><input type="text" id="type" name="type" readonly></td>
        </tr>
        <tr>
            <td><label for="r_stu_name">Student Name:</label></td>
            <td colspan="3"><input style="width: 96%;" id="r_stu_name" name="r_stu_name" type="text" readonly></td>
            <td></td>
            <td></td>
            <td><label for="r_stu_cat">Category:</label></td>
            <td><input type="text" id="r_stu_cat" name="r_stu_cat" readonly></td>
        </tr>
    </table><hr style="width: 80%; margin: 10px auto; border-radius: 60%;">
    <table>
        <tr>
            <td style="width: 10%;"><h4>Receipt Amount :</h4></td>
            <td style="width: 18%;"><input style="width: 90%;" name="receipt_amt" type="text" placeholder="Rct Amount"></td>
            <td style="width: 8%;"><label for="">Payment Type :</label></td>
            <td style="width: 13%;"><select name="" id="">
                <option value="Cash">Cash</option>
                <option value="UPI">UPI</option>
                <option value="DD">DD</option>
                <option value="NEFT / RTGS">NEFT / RTGS</option>
            </select></td>
            <td style="width: 10%;"><label for="">UTR/DD/RTGS No.:</label></td>
            <td style="width: 25%;"><input type="text"></td>
            <td>
              <button type="submit" name="saveReceipt" 
                      style="cursor:pointer; background:#4fc2ffbc; border:1px solid black; color: black;width:60%">
                Save
              </button>
            </td>
         </tr>
    </table>
    <table>
        <!-- Fee Particulars will load here -->
         
        <tbody id="feeRows" style="width: 100%;"></tbody>

        <tr>
            <td><input style="background-color: #a0ff7a04; text-align: right;" type="hidden" id="fee_tot" name="fee_tot" readonly></td>
        </tr>
        
    </table>
</form>

<script>
// 📌 Set today's date by default
const today = new Date().toISOString().split("T")[0];
const rDate = document.getElementById("r_date");
rDate.value = today;

// ❌ Prevent back-date or future-date
rDate.addEventListener("change", function() {
    if (this.value !== today) {
        alert("You cannot change the date. Resetting to today's date.");
        this.value = today;
    }
});

// 🔍 Live Search
document.getElementById("stuSearch").addEventListener("keyup", function(){
    let query = this.value.trim();
    if(query.length < 2) {
        document.getElementById("searchResults").innerHTML = "";
        return;
    }

    fetch("search_student.php?q=" + encodeURIComponent(query))
        .then(res => res.text())
        .then(data => {
            document.getElementById("searchResults").innerHTML = data;
        });
});

// =====================
// Render Fee Tables
// =====================
function renderFees(data, receiptAmt = null) {
  // Add this to top of renderFees function
  // window.feeCache = [...universityFees, ...collegeFees]; // ✅ update global cache with paid amounts

  let feeBody = document.getElementById("feeRows");
  feeBody.innerHTML = "";

  // Group by fee_scope
  let universityFees = data.filter(row => row.fee_scope === "university");
  let collegeFees    = data.filter(row => row.fee_scope === "college");

  // Insert hidden JSON
  let feeJsonInput = document.querySelector("input[name='fee_data']");
  if (feeJsonInput) feeJsonInput.remove();
  document.querySelector("form#receiptForm").insertAdjacentHTML("beforeend", 
    `<input type="hidden" name="fee_data" value='${JSON.stringify([...universityFees, ...collegeFees])}'>`
  );

  let universityTotal = universityFees.reduce((s, f) => s + parseFloat(f.amount), 0);
  let collegeTotal    = collegeFees.reduce((s, f) => s + parseFloat(f.amount), 0);
  let grandTotal      = universityTotal + collegeTotal;

  // Validation
  if (receiptAmt !== null && receiptAmt > grandTotal) {
    alert("❌ Receipt Amount cannot be greater than Grand Total ("+grandTotal.toFixed(2)+")");
    receiptAmt = grandTotal;
    document.querySelector("input[placeholder='Rct Amount']").value = grandTotal.toFixed(2);
  }

  // ========== Allocation Logic ==========
  let remaining = receiptAmt !== null ? receiptAmt : grandTotal;

  // Pay university fees first
  universityFees.forEach(f => {
    let amt = parseFloat(f.amount);
    let pay = Math.min(amt, remaining);
    f.paid = (receiptAmt !== null ? pay : amt);
    remaining -= pay;
  });

  // Pay college fees except Tuition Fee
  collegeFees.filter(f => f.sh_nm !== "TF").forEach(f => {
    let amt = parseFloat(f.amount);
    let pay = Math.min(amt, remaining);
    f.paid = (receiptAmt !== null ? pay : amt);
    remaining -= pay;
  });

  // Pay Tuition Fee last
  let tuitionFee = collegeFees.find(f => f.sh_nm === "TF");
  if (tuitionFee) {
    let amt = parseFloat(tuitionFee.amount);
    let pay = Math.min(amt, remaining);
    tuitionFee.paid = (receiptAmt !== null ? pay : amt);
    remaining -= pay;
  }

  // Default unpaid = 0 if receipt entered, else full
  [...universityFees, ...collegeFees].forEach(f => {
    if (typeof f.paid === "undefined") f.paid = (receiptAmt !== null ? 0 : parseFloat(f.amount));
  });
window.feeCache = [...universityFees, ...collegeFees];
  // ========== Dynamic Table Build ==========
  function makeTable(title, rows, total) {
    if (!rows.length) return "";
    return `
      <table style="width:100%; border-collapse: collapse;" border="1">
        <thead>
          <tr style="background:#0056b3;color:#fff;">
            <th colspan="3">${title}</th>
          </tr>
          <tr style="background:#ddd;">
            <th>Particular</th>
            <th>Amount</th>
            <th>Pay</th>
          </tr>
        </thead>
        <tbody>
          ${rows.map(r => `
            <tr>
              <td>${r.fl_nm}</td>
              <td style="text-align:right;">${parseFloat(r.amount).toFixed(2)}</td>
              <td class="pay-cell"><input type="number" value="${r.paid.toFixed(2)}"></td>
            </tr>
          `).join("")}
        </tbody>
        <tfoot>
          <tr class="fee-totals">
            <td colspan="2" style="text-align:right;">${title} Total:</td>
            <td class="pay-cell">₹${total.toFixed(2)}</td>
          </tr>
        </tfoot>
      </table>`;
  }

  let html = `
    <tr>
      <td colspan="6">
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; align-items: start;">
          ${makeTable("University Fees", universityFees, universityTotal)}
          ${makeTable("College Fees", collegeFees, collegeTotal)}
        </div>
      </td>
    </tr>
    <tr class="fee-grand">
      <td colspan="6">Grand Total : ₹${grandTotal.toFixed(2)}</td>
    </tr>
    <tr class="pen-amt">
      <td colspan="6">Pending Fee: ₹${(grandTotal - (receiptAmt || grandTotal)).toFixed(2)}</td>
    </tr>
    <tr style="background:#6cdefbc5;font-weight:bold;">
      <td colspan="6" style="padding:8px; color:#333;">
        Recommended Payment:<br>
        ➤ University Fees: ₹${universityTotal.toFixed(2)}<br>
        ➤ College Fees (without Tuition): ₹${(collegeTotal - (tuitionFee ? tuitionFee.amount : 0)).toFixed(2)}<br>
        <h3>➤ Total Recommended: ₹${(universityTotal + (collegeTotal - (tuitionFee ? tuitionFee.amount : 0))).toFixed(2)}</h3>
      </td>
    </tr>
  `;

  feeBody.innerHTML = html;
  document.getElementById("fee_tot").value = grandTotal.toFixed(2);
}


// 📌 When row clicked
function selectStudent(stuId, prn, fullname, clsName, category, stuType) {
  document.getElementById("stu_id").value = stuId;
  document.getElementById("cls_id").value = clsName; // store class full name

  document.getElementById("searchResults").innerHTML = "";
  document.getElementById("r_stu_name").value = fullname;
  document.getElementById("r_stu_str").value = clsName;
  document.getElementById("r_stu_cat").value = category;
  document.getElementById("prn_no").value = prn;
  document.getElementById("type").value = stuType;

  fetch("load_fees.php?cls=" + encodeURIComponent(clsName) + "&type=" + encodeURIComponent(stuType))
    .then(res => res.json())
    .then(data => {
      renderFees(data);

      document.querySelector("input[placeholder='Rct Amount']").addEventListener("input", function(){
        let val = parseFloat(this.value || 0);
        renderFees(data, val);
      });
    });
}
</script>
<script>
  document.getElementById("receiptForm").addEventListener("submit", function(e){
  if(!document.getElementById("stu_id").value){
    e.preventDefault();
    alert("⚠️ Please select a student first!");
    return false;
  }
  if(!document.querySelector("input[placeholder='Rct Amount']").value){
    e.preventDefault();
    alert("⚠️ Please enter Receipt Amount!");
    return false;
  }
});
</script>
<script>
document.getElementById("receiptForm").addEventListener("submit", function(e) {
    // collect all fee rows
    let rows = [...document.querySelectorAll("#feeRows table tbody tr")];
    let fees = [];

    rows.forEach(row => {
        let cells = row.querySelectorAll("td");
        if (cells.length >= 3) {
            let feeName = cells[0].innerText.trim();
            let amount  = parseFloat(cells[1].innerText.trim()) || 0;
            let paid    = parseFloat(cells[2].querySelector("input").value) || 0;

            // find matching JSON object from original fee_data
            let original = (window.feeCache || []).find(f => f.fl_nm === feeName && parseFloat(f.amount) === amount);

            fees.push({
                fee_id: original ? original.fee_id : null,
                fee_scope: original ? original.fee_scope : "college",
                sh_nm: original ? original.sh_nm : "",
                fl_nm: feeName,
                amount: amount,
                paid: paid
            });
        }
    });

    // update hidden field before submit
    let hidden = document.querySelector("input[name='fee_data']");
    if (!hidden) {
        hidden = document.createElement("input");
        hidden.type = "hidden";
        hidden.name = "fee_data";
        this.appendChild(hidden);
    }
    hidden.value = JSON.stringify(fees);
});
</script>

</body>
</html>
